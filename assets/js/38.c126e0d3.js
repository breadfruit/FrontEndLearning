(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{450:function(e,t,n){"use strict";n.r(t);var r=n(2),a=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"algorithm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#algorithm"}},[e._v("#")]),e._v(" Algorithm")]),e._v(" "),t("h2",{attrs:{id:"_133-克隆图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_133-克隆图"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://leetcode.cn/problems/clone-graph/",target:"_blank",rel:"noopener noreferrer"}},[e._v("133. 克隆图"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("给你无向 连通 图中一个节点的引用，请你返回该图的 深拷贝（克隆）。")]),e._v(" "),t("p",[e._v("图中的每个节点都包含它的值 val（int） 和其邻居的列表（list[Node]）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Node {\n    public int val;\n    public List<Node> neighbors;\n}\n")])])]),t("p",[e._v("首先明确深拷贝为了深拷贝出整张图，我们需要知道整张图的结构以及对应节点的值。")]),e._v(" "),t("p",[e._v("思路：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("因为是无向图，所以会陷入死循环，比如A -> B B -> A，因此用哈希表进行存储。")])]),e._v(" "),t("li",[t("p",[e._v("哈希表存储的是当前的值，记录是否被访问过，防止陷入死循环，值则是当前的节点。")])]),e._v(" "),t("li",[t("p",[e._v("因为是图，可以用深度搜索进行搜索遍历。")])]),e._v(" "),t("li",[t("p",[e._v("注意是深拷贝，需要clone一个新节点")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * Definition for Node.\n * class Node {\n *     val: number\n *     neighbors: Node[]\n *     constructor(val?: number, neighbors?: Node[]) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.neighbors = (neighbors===undefined ? [] : neighbors)\n *     }\n * }\n */\n\nfunction cloneGraph(node: Node | null): Node | null {\n    let map = new Map();\n    const dfs = (node: Node | null) => {\n        if(node == null) {\n            return;\n        }\n        if(map.has(node.val)) {\n            return map.get(node.val);\n        }\n        // 进行深拷贝\n        let clone = new Node(node.val, []);\n        // 将复制节点进行存储\n        map.set(node.val, clone);\n        for (let i = 0; i < node.neighbors.length; i++) {\n            clone.neighbors.push(dfs(node.neighbors[i]));\n        }\n        return clone;\n    }\n    return dfs(node);\n\n};\n")])])])])]),e._v(" "),t("h2",{attrs:{id:"_17-电话号码的字母组合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-电话号码的字母组合"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/",target:"_blank",rel:"noopener noreferrer"}},[e._v("17. 电话号码的字母组合"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("给定一个仅包含数字 "),t("code",[e._v("2-9")]),e._v(" 的字符串，返回所有它能表示的字母组合。答案可以按 "),t("strong",[e._v("任意顺序")]),e._v(" 返回。")]),e._v(" "),t("p",[e._v("思路：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("随机组合可以用回溯进行解决。")])]),e._v(" "),t("li",[t("p",[e._v("回溯过程中维护一个字符串和当前遍历的位置，终止条件是当前的字符串的长度等于目标字符串。")])]),e._v(" "),t("li",[t("p",[e._v("用一个全局变量进行存储结果。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function letterCombinations(digits: string): string[] {\n    let map = new Map();\n    map.set('2', 'abc');\n    map.set('3', 'def');\n    map.set('4', 'ghi');\n    map.set('5', 'jkl');\n    map.set('6', 'mno');\n    map.set('7', 'pqrs');\n    map.set('8', 'tuv');\n    map.set('9', 'wxyz');\n\n    let res = [];\n    let len = digits.length;\n    if(len === 0) return [];\n    if(len === 1) return Array.from(map.get(digits));\n    const dfs = function(curStr, i) {\n        //终止条件\n        if(i === len){\n            res.push(curStr.slice().join(''));\n            return;\n        }\n        //递归\n        let cur = map.get(digits[i]);\n        for (let j = 0; j < cur.length; j++) {\n            curStr.push(cur[j]);\n            dfs(curStr, i+1);\n            curStr.pop();\n        }\n    }\n    dfs([], 0);\n    return res;\n};\n")])])])])]),e._v(" "),t("h1",{attrs:{id:"review"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#review"}},[e._v("#")]),e._v(" Review")]),e._v(" "),t("h2",{attrs:{id:"how-to-write-performant-react-code-rules-patterns-do-s-and-don-ts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-to-write-performant-react-code-rules-patterns-do-s-and-don-ts"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.developerway.com/posts/how-to-write-performant-react-code",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to write performant React code: rules, patterns, do's and don'ts"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("Also, considering that in 90% of the cases performance problems in React can be summarised as “too many re-renders”,")])]),e._v(" "),t("p",[e._v("So let’s refresh "),t("strong",[e._v("when React components re-render")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("when props or state have changed")]),e._v(" "),t("li",[e._v("when parent component re-renders")]),e._v(" "),t("li",[e._v("when a component uses context and the value of its provider changes")])]),e._v(" "),t("p",[e._v("And the rules we extracted:")]),e._v(" "),t("p",[t("strong",[e._v("Rule #1")]),e._v(": If the only reason why you want to extract your inline functions in props into "),t("code",[e._v("useCallback")]),e._v(" is to avoid re-renders of children components: don’t. It doesn’t work.")]),e._v(" "),t("p",[t("strong",[e._v("Rule #2")]),e._v(": If your component manages state, find parts of the render tree that don’t depend on the changed state and memoise them to minimize their re-renders.")]),e._v(" "),t("p",[t("strong",[e._v("Rule #3")]),e._v(". "),t("em",[e._v("Never")]),e._v(" create new components inside the render function of another component.")]),e._v(" "),t("p",[t("strong",[e._v("Rule #4")]),e._v(". When using context, make sure that "),t("code",[e._v("value")]),e._v(" property is "),t("em",[e._v("always")]),e._v(" memoised if it’s not a number, string or boolean.")]),e._v(" "),t("h1",{attrs:{id:"review-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#review-2"}},[e._v("#")]),e._v(" Review")]),e._v(" "),t("h2",{attrs:{id:"understanding-referential-equality-in-react"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#understanding-referential-equality-in-react"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://blog.bitsrc.io/understanding-referential-equality-in-react-a8fb3769be0",target:"_blank",rel:"noopener noreferrer"}},[e._v("Understanding Referential Equality in React"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("The Comparison Algorithm — Object.is()")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("Object.is()")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#description",target:"_blank",rel:"noopener noreferrer"}},[e._v("algorithm"),t("OutboundLink")],1),e._v(" determines whether two values are the same if:")]),e._v(" "),t("ol",[t("li",[e._v("Both values are "),t("code",[e._v("undefined")]),e._v(" or "),t("code",[e._v("null")]),e._v(".")]),e._v(" "),t("li",[e._v("Both values are either "),t("code",[e._v("true")]),e._v(" or "),t("code",[e._v("false")]),e._v(".")]),e._v(" "),t("li",[e._v("Both values are "),t("code",[e._v("Strings")]),e._v(" having the same characters, length, and order.")]),e._v(" "),t("li",[e._v("Both values are "),t("code",[e._v("Numbers")]),e._v(" with the same value or "),t("code",[e._v("NaN")]),e._v(".")]),e._v(" "),t("li",[e._v("Both values are "),t("code",[e._v("Objects")]),e._v(" that point to one memory location.")])]),e._v(" "),t("p",[e._v("React applies these rules to re-render components whenever a state change is made")]),e._v(" "),t("p",[e._v("对象的属性发生变化，对象比较的是数据所指地址是否相同而不是value，所以不会引起re-render。想让对象进行更新，可以新建一个新对象，改变所指地址，视图就会发生变化。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const changeNameToJohn = () => {\n   mySelf.name = "John";\n   mySelf.age = 30;\n   console.log(mySelf);\n   setMySelf(mySelf);\n};\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const changeNameToJohn = () => {\n   setMySelf({ ...mySelf, name: 'John' });\n}\n")])])]),t("h1",{attrs:{id:"tip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tip"}},[e._v("#")]),e._v(" Tip")]),e._v(" "),t("h2",{attrs:{id:"在ide快速预览ui组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在ide快速预览ui组件"}},[e._v("#")]),e._v(" 在IDE快速预览UI组件")]),e._v(" "),t("p",[e._v("Preview.js,可以在 VS Code 或 JetBrains IDE 中开箱即用，与 React 和 Vue 构建的组件兼容。")]),e._v(" "),t("p",[e._v("https://previewjs.com/docs")])])}),[],!1,null,null,null);t.default=a.exports}}]);