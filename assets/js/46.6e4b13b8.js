(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{464:function(e,n,t){"use strict";t.r(n);var r=t(2),a=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"algorithm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#algorithm"}},[e._v("#")]),e._v(" Algorithm")]),e._v(" "),n("h4",{attrs:{id:"_61-旋转链表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_61-旋转链表"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"https://leetcode.cn/problems/rotate-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("61. 旋转链表"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("strong",[e._v("解题思路：")])]),e._v(" "),n("p",[e._v("闭合为环")]),e._v(" "),n("p",[e._v("记给定链表的长度为 n，注意到当向右移动的次数 k≥"),n("em",[e._v("n")]),e._v(" 时，我们仅需要向右移动 k%n次即可。先将给定的链表连接成环，然后在n-k % n的位置断开，得到我们的新链表头。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var rotateRight = function(head, k) {\n    if (k === 0 || !head || !head.next) {\n        return head;\n    }\n    let n = 1;\n    let cur = head;\n    while (cur.next) {\n        cur = cur.next;\n        n++;\n    }\n\n    let add = n - k % n;\n    if (add === n) {\n        return head;\n    }\n\n    cur.next = head;\n    while (add) {\n        cur = cur.next;\n        add--;\n    }\n\n    const ret = cur.next;\n    cur.next = null;\n    return ret;\n};\n")])])]),n("h4",{attrs:{id:"剑指-offer-ii-029-排序的循环链表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#剑指-offer-ii-029-排序的循环链表"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"https://leetcode.cn/problems/4ueAj6/",target:"_blank",rel:"noopener noreferrer"}},[e._v("剑指 Offer II 029. 排序的循环链表"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("给定"),n("strong",[e._v("循环单调非递减列表")]),e._v("中的一个点，写一个函数向这个列表中插入一个新元素 "),n("code",[e._v("insertVal")]),e._v(" ，使这个列表仍然是循环升序的。")]),e._v(" "),n("p",[e._v("给定的可以是这个列表中任意一个顶点的指针，并不一定是这个列表中最小元素的指针。")]),e._v(" "),n("p",[e._v("如果有多个满足条件的插入位置，可以选择任意一个位置插入新的值，插入后整个列表仍然保持有序。")]),e._v(" "),n("p",[e._v("如果列表为空（给定的节点是 null），需要创建一个循环有序列表并返回这个节点。否则。请返回原先给定的节点。")]),e._v(" "),n("p",[n("strong",[e._v("解题思路：")])]),e._v(" "),n("p",[e._v("非递减，所以相邻节点存在相等。维护两个指针，当前指针和下一个指针。闭环链表，需要考虑三个临界情况：")]),e._v(" "),n("ol",[n("li",[e._v("当前插入值与前后节点相同，则插入其中。")]),e._v(" "),n("li",[e._v("遍历到最大与最小节点，若插入值大于最大节点的值或者小于最小节点的值。")]),e._v(" "),n("li",[e._v("当前链表只有一个节点或者null")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var insert = function(head, insertVal) {\n    const insertNode = new Node(insertVal);\n    if (!head) {\n        insertNode.next = insertNode;\n        return insertNode;\n    }\n    if (head.next === head) {\n        head.next = insertNode;\n        insertNode.next = head;\n        return head;\n    }\n    let cur = head, next = head.next;\n    while (next !== head) {\n        if (insertVal >= cur.val && insertVal <= next.val) {\n            break;\n        }\n        if (cur.val > next.val) {\n            if (insertVal > cur.val || insertVal < next.val) {\n                break;\n            }\n        }\n        cur = cur.next;\n        next = next.next;\n    }\n\n    cur.next = insertNode;\n    insertNode.next = next;\n    return head;\n};\n")])])]),n("h2",{attrs:{id:"review-abortcontroller-is-your-abortcontroller-is-your-friend"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#review-abortcontroller-is-your-abortcontroller-is-your-friend"}},[e._v("#")]),e._v(" Review：AbortController is your "),n("a",{attrs:{href:"https://whistlr.info/2022/abortcontroller-is-your-friend/",target:"_blank",rel:"noopener noreferrer"}},[e._v("AbortController is your friend"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("介绍了一个新的web API , "),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController",target:"_blank",rel:"noopener noreferrer"}},[e._v("AbortController"),n("OutboundLink")],1),e._v("接口表示一个控制器对象，允许你根据需要中止一个或多个 Web 请求。")]),e._v(" "),n("p",[e._v("文中介绍了AbortController在Abort legacy objects，Removing Event Handlers， Constructor pattern，Async work in (P)react hooks的应用。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const controller = new AbortController();\nconst { signal } = controller;\n")])])]),n("p",[e._v("控制器实例和signal之间的区别。controller负责终止，signal负责监听信号，做一些终止信号之前的事情。")]),e._v(" "),n("h2",{attrs:{id:"react-mentions-v4-4-在-textarea-中使用-mention"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-mentions-v4-4-在-textarea-中使用-mention"}},[e._v("#")]),e._v(" React Mentions v4.4：在 Textarea 中使用 @mention")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/signavio/react-mentions",target:"_blank",rel:"noopener noreferrer"}},[e._v("React Mentions v4.4：在 Textarea 中使用 "),n("code",[e._v("@mention")]),n("OutboundLink")],1),e._v(" — 用它来复刻 Facebook/Twitter 风格的文本字段中的“提及”效果。 "),n("a",{attrs:{href:"https://react-mentions.vercel.app/",target:"_blank",rel:"noopener noreferrer"}},[e._v("在线 demo 请点击此处查看"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("这个库用于实现文本框@某人，复制粘贴，聚焦，emojis等。")])])}),[],!1,null,null,null);n.default=a.exports}}]);